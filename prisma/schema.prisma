// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  username String?
  password String

  avatars         Avatar[]
  backgrounds     Background[]
  audios          Audio[]
  generatedVideos GeneratedVideo[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Avatar {
  id       Int     @id @default(autoincrement())
  key      String?
  fileName String

  user   User? @relation(fields: [userId], references: [id])
  userId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("avatars")
}

model Background {
  id       Int     @id @default(autoincrement())
  key      String?
  fileName String

  user   User? @relation(fields: [userId], references: [id])
  userId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("backgrounds")
}

model Audio {
  id       Int     @id @default(autoincrement())
  key      String?
  fileName String

  user   User? @relation(fields: [userId], references: [id])
  userId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("audios")
}

model Model {
  id      Int    @id @default(autoincrement())
  name    String
  voiceId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("models")
}

model GeneratedVideo {
  id       Int     @id @default(autoincrement())
  key      String?
  fileName String

  user   User? @relation(fields: [userId], references: [id])
  userId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("generated_videos")
}
